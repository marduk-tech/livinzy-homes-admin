/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as DashboardImport } from './routes/_dashboard'
import { Route as DashboardIndexImport } from './routes/_dashboard/index'
import { Route as AuthLoginImport } from './routes/auth/login'
import { Route as DashboardProjectsIndexImport } from './routes/_dashboard/projects/index'
import { Route as DashboardProjectsCreateImport } from './routes/_dashboard/projects/create'
import { Route as DashboardProjectsProjectIdEditImport } from './routes/_dashboard/projects/$projectId/edit'

// Create/Update Routes

const DashboardRoute = DashboardImport.update({
  id: '/_dashboard',
  getParentRoute: () => rootRoute,
} as any)

const DashboardIndexRoute = DashboardIndexImport.update({
  path: '/',
  getParentRoute: () => DashboardRoute,
} as any)

const AuthLoginRoute = AuthLoginImport.update({
  path: '/auth/login',
  getParentRoute: () => rootRoute,
} as any)

const DashboardProjectsIndexRoute = DashboardProjectsIndexImport.update({
  path: '/projects/',
  getParentRoute: () => DashboardRoute,
} as any)

const DashboardProjectsCreateRoute = DashboardProjectsCreateImport.update({
  path: '/projects/create',
  getParentRoute: () => DashboardRoute,
} as any)

const DashboardProjectsProjectIdEditRoute =
  DashboardProjectsProjectIdEditImport.update({
    path: '/projects/$projectId/edit',
    getParentRoute: () => DashboardRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_dashboard': {
      id: '/_dashboard'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof DashboardImport
      parentRoute: typeof rootRoute
    }
    '/auth/login': {
      id: '/auth/login'
      path: '/auth/login'
      fullPath: '/auth/login'
      preLoaderRoute: typeof AuthLoginImport
      parentRoute: typeof rootRoute
    }
    '/_dashboard/': {
      id: '/_dashboard/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof DashboardIndexImport
      parentRoute: typeof DashboardImport
    }
    '/_dashboard/projects/create': {
      id: '/_dashboard/projects/create'
      path: '/projects/create'
      fullPath: '/projects/create'
      preLoaderRoute: typeof DashboardProjectsCreateImport
      parentRoute: typeof DashboardImport
    }
    '/_dashboard/projects/': {
      id: '/_dashboard/projects/'
      path: '/projects'
      fullPath: '/projects'
      preLoaderRoute: typeof DashboardProjectsIndexImport
      parentRoute: typeof DashboardImport
    }
    '/_dashboard/projects/$projectId/edit': {
      id: '/_dashboard/projects/$projectId/edit'
      path: '/projects/$projectId/edit'
      fullPath: '/projects/$projectId/edit'
      preLoaderRoute: typeof DashboardProjectsProjectIdEditImport
      parentRoute: typeof DashboardImport
    }
  }
}

// Create and export the route tree

interface DashboardRouteChildren {
  DashboardIndexRoute: typeof DashboardIndexRoute
  DashboardProjectsCreateRoute: typeof DashboardProjectsCreateRoute
  DashboardProjectsIndexRoute: typeof DashboardProjectsIndexRoute
  DashboardProjectsProjectIdEditRoute: typeof DashboardProjectsProjectIdEditRoute
}

const DashboardRouteChildren: DashboardRouteChildren = {
  DashboardIndexRoute: DashboardIndexRoute,
  DashboardProjectsCreateRoute: DashboardProjectsCreateRoute,
  DashboardProjectsIndexRoute: DashboardProjectsIndexRoute,
  DashboardProjectsProjectIdEditRoute: DashboardProjectsProjectIdEditRoute,
}

const DashboardRouteWithChildren = DashboardRoute._addFileChildren(
  DashboardRouteChildren,
)

export interface FileRoutesByFullPath {
  '': typeof DashboardRouteWithChildren
  '/auth/login': typeof AuthLoginRoute
  '/': typeof DashboardIndexRoute
  '/projects/create': typeof DashboardProjectsCreateRoute
  '/projects': typeof DashboardProjectsIndexRoute
  '/projects/$projectId/edit': typeof DashboardProjectsProjectIdEditRoute
}

export interface FileRoutesByTo {
  '/auth/login': typeof AuthLoginRoute
  '/': typeof DashboardIndexRoute
  '/projects/create': typeof DashboardProjectsCreateRoute
  '/projects': typeof DashboardProjectsIndexRoute
  '/projects/$projectId/edit': typeof DashboardProjectsProjectIdEditRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_dashboard': typeof DashboardRouteWithChildren
  '/auth/login': typeof AuthLoginRoute
  '/_dashboard/': typeof DashboardIndexRoute
  '/_dashboard/projects/create': typeof DashboardProjectsCreateRoute
  '/_dashboard/projects/': typeof DashboardProjectsIndexRoute
  '/_dashboard/projects/$projectId/edit': typeof DashboardProjectsProjectIdEditRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | ''
    | '/auth/login'
    | '/'
    | '/projects/create'
    | '/projects'
    | '/projects/$projectId/edit'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/auth/login'
    | '/'
    | '/projects/create'
    | '/projects'
    | '/projects/$projectId/edit'
  id:
    | '__root__'
    | '/_dashboard'
    | '/auth/login'
    | '/_dashboard/'
    | '/_dashboard/projects/create'
    | '/_dashboard/projects/'
    | '/_dashboard/projects/$projectId/edit'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  DashboardRoute: typeof DashboardRouteWithChildren
  AuthLoginRoute: typeof AuthLoginRoute
}

const rootRouteChildren: RootRouteChildren = {
  DashboardRoute: DashboardRouteWithChildren,
  AuthLoginRoute: AuthLoginRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_dashboard",
        "/auth/login"
      ]
    },
    "/_dashboard": {
      "filePath": "_dashboard.tsx",
      "children": [
        "/_dashboard/",
        "/_dashboard/projects/create",
        "/_dashboard/projects/",
        "/_dashboard/projects/$projectId/edit"
      ]
    },
    "/auth/login": {
      "filePath": "auth/login.tsx"
    },
    "/_dashboard/": {
      "filePath": "_dashboard/index.tsx",
      "parent": "/_dashboard"
    },
    "/_dashboard/projects/create": {
      "filePath": "_dashboard/projects/create.tsx",
      "parent": "/_dashboard"
    },
    "/_dashboard/projects/": {
      "filePath": "_dashboard/projects/index.tsx",
      "parent": "/_dashboard"
    },
    "/_dashboard/projects/$projectId/edit": {
      "filePath": "_dashboard/projects/$projectId/edit.tsx",
      "parent": "/_dashboard"
    }
  }
}
ROUTE_MANIFEST_END */
